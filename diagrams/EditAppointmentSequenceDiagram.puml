@startuml
!include style.puml
skinparam ArrowFontStyle plain

box Logic LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant ":CommandParser" as CommandParser LOGIC_COLOR
participant ":EditAppointmentCommandParser" as EditAppointmentCommandParser LOGIC_COLOR
participant "ead:EditAppointmentDescriptor" as EditAppointmentDescriptor LOGIC_COLOR
participant "e:EditAppointmentCommand" as EditAppointmentCommand LOGIC_COLOR
participant "r:CommandResult" as CommandResult LOGIC_COLOR
end box

box Model MODEL_COLOR_T1
participant "m:Model" as Model MODEL_COLOR
end box

[-> LogicManager : execute("args")
activate LogicManager


LogicManager -> CommandParser : parseCommand("args")
activate CommandParser

create EditAppointmentCommandParser
CommandParser -> EditAppointmentCommandParser
activate EditAppointmentCommandParser

EditAppointmentCommandParser --> CommandParser
deactivate EditAppointmentCommandParser


CommandParser -> EditAppointmentCommandParser : parse(args)
activate EditAppointmentCommandParser

create EditAppointmentDescriptor
EditAppointmentCommandParser -> EditAppointmentDescriptor :  EditPersonDescriptor()
activate EditAppointmentDescriptor
EditAppointmentDescriptor -> EditAppointmentCommandParser

deactivate EditAppointmentDescriptor
create EditAppointmentCommand
EditAppointmentCommandParser -> EditAppointmentCommand :  EditAppointmentCommand(aid, ead)
activate EditAppointmentCommand
EditAppointmentCommand --> EditAppointmentCommandParser
deactivate EditAppointmentCommand

EditAppointmentCommandParser --> CommandParser : e
deactivate EditAppointmentCommandParser

CommandParser --> LogicManager : e
deactivate CommandParser

LogicManager -> EditAppointmentCommand : execute(model)
activate EditAppointmentCommand

EditAppointmentCommand -> EditAppointmentCommand : find the matching appointment
EditAppointmentCommand -> EditAppointmentCommand : createEditedAppointment(ead)
EditAppointmentCommand -> EditAppointmentCommand : check for validity

EditAppointmentCommand -> Model : setAppointment()
activate Model
Model --> EditAppointmentCommand
deactivate Model
EditAppointmentCommand -> Model : updateFilterAppointmentList()
activate Model

Model --> EditAppointmentCommand
deactivate Model

create CommandResult
EditAppointmentCommand -> CommandResult:  CommandResult()
activate CommandResult
CommandResult --> EditAppointmentCommand: r
deactivate CommandResult

EditAppointmentCommand --> LogicManager : r
deactivate EditAppointmentCommand

[<--LogicManager : command successful
deactivate LogicManager
@enduml
