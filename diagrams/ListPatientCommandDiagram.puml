@startuml
!theme plain

class ListPatientCommandParser {
    +parse(args : String) : ListCommand
}

class ArgumentMultimap {
}

class ArgumentTokenizer {
    +tokenize(args : String, vararg prefixes : Prefix) : ArgumentMultimap
}

class ParserUtil {
    +hasAtLeastOnePrefixPresent(argMultimap : ArgumentMultimap, vararg prefixes : Prefix) : boolean
}

class ListCommand {
    -predicate : Predicate<Patient>
}

class NameContainsKeywordsPredicate {
}

class PhoneContainsKeywordsPredicate {
}

class EmailContainsKeywordPredicate {
}

class TagContainsKeywordPredicate {
}

ListPatientCommandParser --> ArgumentTokenizer : uses
ListPatientCommandParser --> ArgumentMultimap : uses
ListPatientCommandParser --> ParserUtil : uses
ListPatientCommandParser --> ListCommand : creates
ListPatientCommandParser --> NameContainsKeywordsPredicate : creates
ListPatientCommandParser --> PhoneContainsKeywordsPredicate : creates
ListPatientCommandParser --> EmailContainsKeywordPredicate : creates
ListPatientCommandParser --> TagContainsKeywordPredicate : creates

note right of ListPatientCommandParser : Parses input arguments\nto create a new ListCommand object
note right of ArgumentTokenizer : Tokenizes the arguments\nbased on provided prefixes
note right of ParserUtil : Checks if at least\none prefix is present
note right of ListCommand : Command to list patients\nbased on predicates

@enduml
